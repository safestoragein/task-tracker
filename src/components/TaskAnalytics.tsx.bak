'use client'

import { useMemo } from 'react'
import { useTask } from '@/contexts/TaskContext'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card'
import { Badge } from './ui/badge'
import { Progress } from './ui/progress'
import { Separator } from './ui/separator'
import { Avatar, AvatarFallback, AvatarImage } from './ui/avatar'
import { 
  TrendingUp, 
  Clock, 
  CheckCircle, 
  AlertTriangle, 
  Users, 
  BarChart3,
  Target,
  Calendar
} from 'lucide-react'

export function TaskAnalytics() {
  const { state } = useTask()

  const analytics = useMemo(() => {
    const total = state.tasks.length
    const completed = state.tasks.filter(t => t.status === 'done').length
    const inProgress = state.tasks.filter(t => t.status === 'in-progress').length
    const overdue = state.tasks.filter(
      t => t.dueDate && t.dueDate < new Date() && t.status !== 'done'
    ).length

    // Priority distribution
    const priorityStats = {
      high: state.tasks.filter(t => t.priority === 'high').length,
      medium: state.tasks.filter(t => t.priority === 'medium').length,
      low: state.tasks.filter(t => t.priority === 'low').length,
    }

    // Team member workload
    const memberWorkload = state.teamMembers.map(member => {
      const memberTasks = state.tasks.filter(t => t.assigneeId === member.id)
      const memberCompleted = memberTasks.filter(t => t.status === 'done').length
      const memberInProgress = memberTasks.filter(t => t.status === 'in-progress').length
      const memberOverdue = memberTasks.filter(
        t => t.dueDate && t.dueDate < new Date() && t.status !== 'done'
      ).length

      return {
        ...member,
        totalTasks: memberTasks.length,
        completed: memberCompleted,
        inProgress: memberInProgress,
        overdue: memberOverdue,
        completionRate: memberTasks.length > 0 ? (memberCompleted / memberTasks.length) * 100 : 0
      }
    })

    // Time tracking
    const totalEstimated = state.tasks.reduce((sum, task) => sum + (task.estimatedHours || 0), 0)
    const totalActual = state.tasks.reduce((sum, task) => sum + (task.actualHours || 0), 0)

    // Label usage
    const labelStats = state.labels.map(label => ({
      ...label,
      count: state.tasks.filter(task => task.labels.some(l => l.id === label.id)).length
    })).sort((a, b) => b.count - a.count)

    // Weekly completion trend (mock data for demo)
    const weeklyCompletion = [
      { week: 'This Week', completed: completed },
      { week: 'Last Week', completed: Math.floor(completed * 0.8) },
      { week: '2 Weeks Ago', completed: Math.floor(completed * 0.6) },
      { week: '3 Weeks Ago', completed: Math.floor(completed * 0.4) },
    ]

    return {
      total,
      completed,
      inProgress,
      overdue,
      completionRate: total > 0 ? (completed / total) * 100 : 0,
      priorityStats,
      memberWorkload,
      totalEstimated,
      totalActual,
      timeAccuracy: totalEstimated > 0 ? (totalActual / totalEstimated) * 100 : 0,
      labelStats,
      weeklyCompletion
    }
  }, [state.tasks, state.teamMembers, state.labels])

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-semibold mb-2">Team Analytics</h2>
        <p className="text-muted-foreground">
          Insights and performance metrics for your team
        </p>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Tasks</CardTitle>
            <BarChart3 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analytics.total}</div>
            <p className="text-xs text-muted-foreground">
              {analytics.inProgress} in progress
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Completion Rate</CardTitle>
            <CheckCircle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analytics.completionRate.toFixed(1)}%</div>
            <Progress value={analytics.completionRate} className="mt-2" />
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Overdue Tasks</CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-600">{analytics.overdue}</div>
            <p className="text-xs text-muted-foreground">
              Need immediate attention
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Time Accuracy</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{analytics.timeAccuracy.toFixed(1)}%</div>
            <p className="text-xs text-muted-foreground">
              {analytics.totalActual}h / {analytics.totalEstimated}h
            </p>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Priority Distribution */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5" />
              Priority Distribution
            </CardTitle>
            <CardDescription>
              Task breakdown by priority levels
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded-full bg-red-500" />
                  <span className="text-sm">High Priority</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm font-medium">{analytics.priorityStats.high}</span>
                  <div className="w-20 bg-muted rounded-full h-2">
                    <div 
                      className="bg-red-500 h-2 rounded-full" 
                      style={{ width: `${(analytics.priorityStats.high / analytics.total) * 100}%` }}
                    />
                  </div>
                </div>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded-full bg-yellow-500" />
                  <span className="text-sm">Medium Priority</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm font-medium">{analytics.priorityStats.medium}</span>
                  <div className="w-20 bg-muted rounded-full h-2">
                    <div 
                      className="bg-yellow-500 h-2 rounded-full" 
                      style={{ width: `${(analytics.priorityStats.medium / analytics.total) * 100}%` }}
                    />
                  </div>
                </div>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <div className="w-3 h-3 rounded-full bg-green-500" />
                  <span className="text-sm">Low Priority</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-sm font-medium">{analytics.priorityStats.low}</span>
                  <div className="w-20 bg-muted rounded-full h-2">
                    <div 
                      className="bg-green-500 h-2 rounded-full" 
                      style={{ width: `${(analytics.priorityStats.low / analytics.total) * 100}%` }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Label Usage */}
        <Card>
          <CardHeader>
            <CardTitle>Popular Labels</CardTitle>
            <CardDescription>
              Most frequently used labels
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {analytics.labelStats.slice(0, 5).map(label => (
                <div key={label.id} className="flex items-center justify-between">
                  <Badge
                    variant="secondary"
                    style={{ backgroundColor: `${label.color}15`, color: label.color }}
                  >
                    {label.name}
                  </Badge>
                  <span className="text-sm text-muted-foreground">
                    {label.count} tasks
                  </span>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Team Performance */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Users className="h-5 w-5" />
            Team Performance
          </CardTitle>
          <CardDescription>
            Individual team member statistics and workload
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {analytics.memberWorkload.map(member => (
              <div key={member.id} className="flex items-center gap-4 p-4 border rounded-lg">
                <Avatar className="h-10 w-10">
                  <AvatarImage src={member.avatar} />
                  <AvatarFallback>
                    {member.name.split(' ').map(n => n[0]).join('')}
                  </AvatarFallback>
                </Avatar>
                
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-2">
                    <div>
                      <p className="font-medium">{member.name}</p>
                      <p className="text-sm text-muted-foreground">{member.role}</p>
                    </div>
                    <div className="text-right">
                      <p className="text-sm font-medium">{member.totalTasks} tasks</p>
                      <p className="text-xs text-muted-foreground">
                        {member.completionRate.toFixed(0)}% completion
                      </p>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4 text-sm">
                    <div className="text-center">
                      <p className="font-medium text-green-600">{member.completed}</p>
                      <p className="text-muted-foreground">Completed</p>
                    </div>
                    <div className="text-center">
                      <p className="font-medium text-blue-600">{member.inProgress}</p>
                      <p className="text-muted-foreground">In Progress</p>
                    </div>
                    <div className="text-center">
                      <p className="font-medium text-red-600">{member.overdue}</p>
                      <p className="text-muted-foreground">Overdue</p>
                    </div>
                  </div>
                  
                  <Progress value={member.completionRate} className="mt-3" />
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}